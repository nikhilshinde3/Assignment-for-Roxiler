database schema using Mongoose:
-----------------------------------
const productSchema = new mongoose.Schema({
    title: String,
    description: String,
    price: Number,
    category: String,
    dateOfSale: Date,
    sold: Boolean
});
const Product = mongoose.model('Product', productSchema);


-----------------------
Create a GET endpoint
-----------------------
app.get('/seed-data', async (req, res) => {
    try {
        const response = await axios.get('https://s3.amazonaws.com/roxiler.com/product_transaction.json');
        await Product.insertMany(response.data);
        res.status(200).send('Database initialized with seed data.');
    } catch (error) {
        res.status(500).send('Error seeding data.');
    }
});


search and pagination
----------------------
app.get('/transactions', async (req, res) => {
    const { page = 1, perPage = 10, search = '', month } = req.query;
    const query = {
        dateOfSale: { $regex: `${month}`, $options: 'i' }
    };

    if (search) {
        query.$or = [
            { title: { $regex: search, $options: 'i' } },
            { description: { $regex: search, $options: 'i' } },
            { price: { $regex: search, $options: 'i' } }
        ];
    }

    const transactions = await Product.find(query)
        .skip((page - 1) * perPage)
        .limit(parseInt(perPage));

    res.json(transactions);
});


calculate statistics total sale amount, sold, and unsold items
----------------------------------------------------------------
app.get('/statistics', async (req, res) => {
    const { month } = req.query;
    const transactions = await Product.find({ dateOfSale: { $regex: `${month}`, $options: 'i' } });

    const totalSaleAmount = transactions.reduce((acc, curr) => acc + (curr.sold ? curr.price : 0), 0);
    const totalSoldItems = transactions.filter(t => t.sold).length;
    const totalNotSoldItems = transactions.length - totalSoldItems;

    res.json({ totalSaleAmount, totalSoldItems, totalNotSoldItems });
});


GET endpoint to return data for price range distribution
----------------------------------------------------------
app.get('/price-range', async (req, res) => {
    const { month } = req.query;
    const transactions = await Product.find({ dateOfSale: { $regex: `${month}`, $options: 'i' } });

    const ranges = {
        '0-100': 0, '101-200': 0, '201-300': 0, '301-400': 0,
        '401-500': 0, '501-600': 0, '601-700': 0, '701-800': 0,
        '801-900': 0, '901-above': 0
    };

    transactions.forEach(t => {
        if (t.price <= 100) ranges['0-100']++;
        else if (t.price <= 200) ranges['101-200']++;
        // ... similarly for other ranges
        else ranges['901-above']++;
    });

    res.json(ranges);
});


GET endpoint to return unique categories and the number of items
------------------------------------------------------------------
app.get('/category-distribution', async (req, res) => {
    const { month } = req.query;
    const transactions = await Product.find({ dateOfSale: { $regex: `${month}`, $options: 'i' } });

    const categoryCounts = transactions.reduce((acc, curr) => {
        acc[curr.category] = (acc[curr.category] || 0) + 1;
        return acc;
    }, {});

    res.json(categoryCounts);
});


GET endpoint to combine the responses from the statistics, price range, and category APIs
---------------------------------------------------------------------------------------------
app.get('/combined-data', async (req, res) => {
    const { month } = req.query;
    const [statistics, priceRange, categoryDistribution] = await Promise.all([
        axios.get(`/statistics?month=${month}`),
        axios.get(`/price-range?month=${month}`),
        axios.get(`/category-distribution?month=${month}`)
    ]);

    res.json({
        statistics: statistics.data,
        priceRange: priceRange.data,
        categoryDistribution: categoryDistribution.data
    });
});









